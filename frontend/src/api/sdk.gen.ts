// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from './client';
import type {
  RegisterAuthRegisterPostData,
  RegisterAuthRegisterPostResponses,
  RegisterAuthRegisterPostErrors,
  ConfirmSignupAuthConfirmSignupPostData,
  ConfirmSignupAuthConfirmSignupPostResponses,
  ConfirmSignupAuthConfirmSignupPostErrors,
  LoginAuthLoginPostData,
  LoginAuthLoginPostResponses,
  LoginAuthLoginPostErrors,
  LogoutAuthLogoutPostData,
  LogoutAuthLogoutPostResponses,
  RefreshTokenAuthRefreshPostData,
  RefreshTokenAuthRefreshPostResponses,
  RefreshTokenAuthRefreshPostErrors,
  ForgotPasswordAuthForgotPasswordPostData,
  ForgotPasswordAuthForgotPasswordPostResponses,
  ForgotPasswordAuthForgotPasswordPostErrors,
  ResetPasswordAuthResetPasswordPostData,
  ResetPasswordAuthResetPasswordPostResponses,
  ResetPasswordAuthResetPasswordPostErrors,
  GetCurrentUserInfoAuthMeGetData,
  GetCurrentUserInfoAuthMeGetResponses,
  SendMessageChatMessagePostData,
  SendMessageChatMessagePostResponses,
  SendMessageChatMessagePostErrors,
  GetChatHistoryChatHistoryGetData,
  GetChatHistoryChatHistoryGetResponses,
  DeleteChatByIdChatHistoryChatIdDeleteData,
  DeleteChatByIdChatHistoryChatIdDeleteResponses,
  DeleteChatByIdChatHistoryChatIdDeleteErrors,
  GetChatByIdChatHistoryChatIdGetData,
  GetChatByIdChatHistoryChatIdGetResponses,
  GetChatByIdChatHistoryChatIdGetErrors,
  ContinueChatChatContinueChatIdPostData,
  ContinueChatChatContinueChatIdPostResponses,
  ContinueChatChatContinueChatIdPostErrors,
  GetMessageDataChatDataMessageIdGetData,
  GetMessageDataChatDataMessageIdGetResponses,
  GetMessageDataChatDataMessageIdGetErrors,
  DownloadMessageDataChatDownloadMessageIdGetData,
  DownloadMessageDataChatDownloadMessageIdGetResponses,
  DownloadMessageDataChatDownloadMessageIdGetErrors,
  UploadFileKbUploadPostData,
  UploadFileKbUploadPostResponses,
  UploadFileKbUploadPostErrors,
  UploadTextKbKbUploadTextPostData,
  UploadTextKbKbUploadTextPostResponses,
  UploadTextKbKbUploadTextPostErrors,
  ListKbKbListGetData,
  ListKbKbListGetResponses,
  GetKbInsightKbKbIdInsightGetData,
  GetKbInsightKbKbIdInsightGetResponses,
  GetKbInsightKbKbIdInsightGetErrors,
  DeleteKnowledgeBaseKbKbIdDeleteData,
  DeleteKnowledgeBaseKbKbIdDeleteResponses,
  DeleteKnowledgeBaseKbKbIdDeleteErrors,
  DownloadFileKbDownloadKbIdGetData,
  DownloadFileKbDownloadKbIdGetResponses,
  DownloadFileKbDownloadKbIdGetErrors,
  GetSettingsUserSettingsGetData,
  GetSettingsUserSettingsGetResponses,
  UpdateSettingsUserSettingsPostData,
  UpdateSettingsUserSettingsPostResponses,
  UpdateSettingsUserSettingsPostErrors,
  GetDatasourcesUserDatasourcesGetData,
  GetDatasourcesUserDatasourcesGetResponses,
  GetAccessibleDatasourcesUserDatasourcesAccessibleGetData,
  GetAccessibleDatasourcesUserDatasourcesAccessibleGetResponses,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostResponses,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostErrors,
  GetUserProfileUserProfileGetData,
  GetUserProfileUserProfileGetResponses,
  GetUserIamRoleInfoUserIamRoleInfoGetData,
  GetUserIamRoleInfoUserIamRoleInfoGetResponses,
  HealthCheckMetricsHealthGetData,
  HealthCheckMetricsHealthGetResponses,
  RootGetData,
  RootGetResponses,
} from './types.gen';
import {
  zRegisterAuthRegisterPostData,
  zConfirmSignupAuthConfirmSignupPostData,
  zLoginAuthLoginPostData,
  zLogoutAuthLogoutPostData,
  zRefreshTokenAuthRefreshPostData,
  zForgotPasswordAuthForgotPasswordPostData,
  zResetPasswordAuthResetPasswordPostData,
  zGetCurrentUserInfoAuthMeGetData,
  zGetCurrentUserInfoAuthMeGetResponse,
  zSendMessageChatMessagePostData,
  zGetChatHistoryChatHistoryGetData,
  zDeleteChatByIdChatHistoryChatIdDeleteData,
  zGetChatByIdChatHistoryChatIdGetData,
  zContinueChatChatContinueChatIdPostData,
  zGetMessageDataChatDataMessageIdGetData,
  zDownloadMessageDataChatDownloadMessageIdGetData,
  zUploadFileKbUploadPostData,
  zUploadFileKbUploadPostResponse,
  zUploadTextKbKbUploadTextPostData,
  zListKbKbListGetData,
  zListKbKbListGetResponse,
  zGetKbInsightKbKbIdInsightGetData,
  zDeleteKnowledgeBaseKbKbIdDeleteData,
  zDownloadFileKbDownloadKbIdGetData,
  zGetSettingsUserSettingsGetData,
  zGetSettingsUserSettingsGetResponse,
  zUpdateSettingsUserSettingsPostData,
  zGetDatasourcesUserDatasourcesGetData,
  zGetDatasourcesUserDatasourcesGetResponse,
  zGetAccessibleDatasourcesUserDatasourcesAccessibleGetData,
  zGetAccessibleDatasourcesUserDatasourcesAccessibleGetResponse,
  zRequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData,
  zGetUserProfileUserProfileGetData,
  zGetUserIamRoleInfoUserIamRoleInfoGetData,
  zHealthCheckMetricsHealthGetData,
  zRootGetData,
} from './zod.gen';
import { client as _heyApiClient } from './client.gen';
import { getCurrentUserInfoAuthMeGetResponseTransformer } from './transformers.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Register
 * Register a new user
 */
export const registerAuthRegisterPost = <ThrowOnError extends boolean = false>(
  options: Options<RegisterAuthRegisterPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterAuthRegisterPostResponses,
    RegisterAuthRegisterPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zRegisterAuthRegisterPostData.parseAsync(data);
    },
    responseType: 'json',
    url: '/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Confirm Signup
 * Confirm user signup (AWS Cognito only)
 */
export const confirmSignupAuthConfirmSignupPost = <ThrowOnError extends boolean = false>(
  options: Options<ConfirmSignupAuthConfirmSignupPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ConfirmSignupAuthConfirmSignupPostResponses,
    ConfirmSignupAuthConfirmSignupPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zConfirmSignupAuthConfirmSignupPostData.parseAsync(data);
    },
    responseType: 'json',
    url: '/auth/confirm-signup',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Login
 * Login user
 */
export const loginAuthLoginPost = <ThrowOnError extends boolean = false>(
  options: Options<LoginAuthLoginPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LoginAuthLoginPostResponses,
    LoginAuthLoginPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zLoginAuthLoginPostData.parseAsync(data);
    },
    responseType: 'json',
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Logout
 * Logout user
 */
export const logoutAuthLogoutPost = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutAuthLogoutPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LogoutAuthLogoutPostResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zLogoutAuthLogoutPostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/logout',
    ...options,
  });
};

/**
 * Refresh Token
 * Refresh access token
 */
export const refreshTokenAuthRefreshPost = <ThrowOnError extends boolean = false>(
  options: Options<RefreshTokenAuthRefreshPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RefreshTokenAuthRefreshPostResponses,
    RefreshTokenAuthRefreshPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zRefreshTokenAuthRefreshPostData.parseAsync(data);
    },
    responseType: 'json',
    url: '/auth/refresh',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Forgot Password
 * Initiate forgot password flow
 */
export const forgotPasswordAuthForgotPasswordPost = <ThrowOnError extends boolean = false>(
  options: Options<ForgotPasswordAuthForgotPasswordPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ForgotPasswordAuthForgotPasswordPostResponses,
    ForgotPasswordAuthForgotPasswordPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zForgotPasswordAuthForgotPasswordPostData.parseAsync(data);
    },
    responseType: 'json',
    url: '/auth/forgot-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reset Password
 * Reset password with confirmation code
 */
export const resetPasswordAuthResetPasswordPost = <ThrowOnError extends boolean = false>(
  options: Options<ResetPasswordAuthResetPasswordPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ResetPasswordAuthResetPasswordPostResponses,
    ResetPasswordAuthResetPasswordPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zResetPasswordAuthResetPasswordPostData.parseAsync(data);
    },
    responseType: 'json',
    url: '/auth/reset-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Current User Info
 * Get current user info
 */
export const getCurrentUserInfoAuthMeGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserInfoAuthMeGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserInfoAuthMeGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetCurrentUserInfoAuthMeGetData.parseAsync(data);
    },
    responseTransformer: getCurrentUserInfoAuthMeGetResponseTransformer,
    responseType: 'json',
    responseValidator: async (data) => {
      return await zGetCurrentUserInfoAuthMeGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/me',
    ...options,
  });
};

/**
 * Send Message
 * Send a message and get response from text2sql pipeline
 */
export const sendMessageChatMessagePost = <ThrowOnError extends boolean = false>(
  options: Options<SendMessageChatMessagePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SendMessageChatMessagePostResponses,
    SendMessageChatMessagePostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zSendMessageChatMessagePostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/message',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Chat History
 * Get chat history for current user
 */
export const getChatHistoryChatHistoryGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetChatHistoryChatHistoryGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetChatHistoryChatHistoryGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetChatHistoryChatHistoryGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/history',
    ...options,
  });
};

/**
 * Delete Chat By Id
 * Delete specific chat by ID for current user
 */
export const deleteChatByIdChatHistoryChatIdDelete = <ThrowOnError extends boolean = false>(
  options: Options<DeleteChatByIdChatHistoryChatIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteChatByIdChatHistoryChatIdDeleteResponses,
    DeleteChatByIdChatHistoryChatIdDeleteErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDeleteChatByIdChatHistoryChatIdDeleteData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/history/{chat_id}',
    ...options,
  });
};

/**
 * Get Chat By Id
 * Get specific chat by ID for current user
 */
export const getChatByIdChatHistoryChatIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetChatByIdChatHistoryChatIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChatByIdChatHistoryChatIdGetResponses,
    GetChatByIdChatHistoryChatIdGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetChatByIdChatHistoryChatIdGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/history/{chat_id}',
    ...options,
  });
};

/**
 * Continue Chat
 * Continue an existing chat conversation
 */
export const continueChatChatContinueChatIdPost = <ThrowOnError extends boolean = false>(
  options: Options<ContinueChatChatContinueChatIdPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ContinueChatChatContinueChatIdPostResponses,
    ContinueChatChatContinueChatIdPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zContinueChatChatContinueChatIdPostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/continue/{chat_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Message Data
 * Get the data associated with a specific message for preview purposes
 */
export const getMessageDataChatDataMessageIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetMessageDataChatDataMessageIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMessageDataChatDataMessageIdGetResponses,
    GetMessageDataChatDataMessageIdGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetMessageDataChatDataMessageIdGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/data/{message_id}',
    ...options,
  });
};

/**
 * Download Message Data
 * Download message data in specified format
 */
export const downloadMessageDataChatDownloadMessageIdGet = <ThrowOnError extends boolean = false>(
  options: Options<DownloadMessageDataChatDownloadMessageIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadMessageDataChatDownloadMessageIdGetResponses,
    DownloadMessageDataChatDownloadMessageIdGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDownloadMessageDataChatDownloadMessageIdGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/download/{message_id}',
    ...options,
  });
};

/**
 * Upload File
 * Upload file to knowledge base
 */
export const uploadFileKbUploadPost = <ThrowOnError extends boolean = false>(
  options: Options<UploadFileKbUploadPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadFileKbUploadPostResponses,
    UploadFileKbUploadPostErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    requestValidator: async (data) => {
      return await zUploadFileKbUploadPostData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zUploadFileKbUploadPostResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/upload',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Upload Text Kb
 * Upload text as knowledge base
 */
export const uploadTextKbKbUploadTextPost = <ThrowOnError extends boolean = false>(
  options: Options<UploadTextKbKbUploadTextPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadTextKbKbUploadTextPostResponses,
    UploadTextKbKbUploadTextPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zUploadTextKbKbUploadTextPostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/upload-text',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Kb
 * List knowledge base files for current user
 */
export const listKbKbListGet = <ThrowOnError extends boolean = false>(
  options?: Options<ListKbKbListGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListKbKbListGetResponses, unknown, ThrowOnError>({
    requestValidator: async (data) => {
      return await zListKbKbListGetData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zListKbKbListGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/list',
    ...options,
  });
};

/**
 * Get Kb Insight
 * Get insight for a knowledge base file
 */
export const getKbInsightKbKbIdInsightGet = <ThrowOnError extends boolean = false>(
  options: Options<GetKbInsightKbKbIdInsightGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetKbInsightKbKbIdInsightGetResponses,
    GetKbInsightKbKbIdInsightGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetKbInsightKbKbIdInsightGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/{kb_id}/insight',
    ...options,
  });
};

/**
 * Delete Knowledge Base
 * Delete knowledge base entry
 */
export const deleteKnowledgeBaseKbKbIdDelete = <ThrowOnError extends boolean = false>(
  options: Options<DeleteKnowledgeBaseKbKbIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteKnowledgeBaseKbKbIdDeleteResponses,
    DeleteKnowledgeBaseKbKbIdDeleteErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDeleteKnowledgeBaseKbKbIdDeleteData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/{kb_id}',
    ...options,
  });
};

/**
 * Download File
 * Download file from knowledge base
 */
export const downloadFileKbDownloadKbIdGet = <ThrowOnError extends boolean = false>(
  options: Options<DownloadFileKbDownloadKbIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadFileKbDownloadKbIdGetResponses,
    DownloadFileKbDownloadKbIdGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDownloadFileKbDownloadKbIdGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/download/{kb_id}',
    ...options,
  });
};

/**
 * Get Settings
 * Get user settings
 */
export const getSettingsUserSettingsGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetSettingsUserSettingsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSettingsUserSettingsGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetSettingsUserSettingsGetData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zGetSettingsUserSettingsGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/settings',
    ...options,
  });
};

/**
 * Update Settings
 * Update user settings
 */
export const updateSettingsUserSettingsPost = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSettingsUserSettingsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UpdateSettingsUserSettingsPostResponses,
    UpdateSettingsUserSettingsPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zUpdateSettingsUserSettingsPostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/settings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Datasources
 * Get all datasources with user access information
 */
export const getDatasourcesUserDatasourcesGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetDatasourcesUserDatasourcesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDatasourcesUserDatasourcesGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetDatasourcesUserDatasourcesGetData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zGetDatasourcesUserDatasourcesGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/datasources',
    ...options,
  });
};

/**
 * Get Accessible Datasources
 * Get only datasources that user has access to
 */
export const getAccessibleDatasourcesUserDatasourcesAccessibleGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAccessibleDatasourcesUserDatasourcesAccessibleGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAccessibleDatasourcesUserDatasourcesAccessibleGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAccessibleDatasourcesUserDatasourcesAccessibleGetData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zGetAccessibleDatasourcesUserDatasourcesAccessibleGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/datasources/accessible',
    ...options,
  });
};

/**
 * Request Datasource Access
 * Request access to a datasource
 */
export const requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostResponses,
    RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zRequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData.parseAsync(
        data,
      );
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/datasources/{datasource_id}/request-access',
    ...options,
  });
};

/**
 * Get User Profile
 * Get user profile information
 */
export const getUserProfileUserProfileGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserProfileUserProfileGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserProfileUserProfileGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetUserProfileUserProfileGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/profile',
    ...options,
  });
};

/**
 * Get User Iam Role Info
 * Get user IAM role information (AWS only)
 */
export const getUserIamRoleInfoUserIamRoleInfoGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserIamRoleInfoUserIamRoleInfoGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserIamRoleInfoUserIamRoleInfoGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetUserIamRoleInfoUserIamRoleInfoGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/iam-role-info',
    ...options,
  });
};

/**
 * Health Check
 */
export const healthCheckMetricsHealthGet = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckMetricsHealthGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthCheckMetricsHealthGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zHealthCheckMetricsHealthGetData.parseAsync(data);
    },
    responseType: 'json',
    url: '/metrics/health',
    ...options,
  });
};

/**
 * Root Endpoint
 */
export const rootGet = <ThrowOnError extends boolean = false>(
  options?: Options<RootGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
    requestValidator: async (data) => {
      return await zRootGetData.parseAsync(data);
    },
    responseType: 'json',
    url: '/',
    ...options,
  });
};
