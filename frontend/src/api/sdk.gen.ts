// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from './client';
import type {
  RegisterAuthRegisterPostData,
  RegisterAuthRegisterPostResponses,
  RegisterAuthRegisterPostErrors,
  LoginAuthLoginPostData,
  LoginAuthLoginPostResponses,
  LoginAuthLoginPostErrors,
  LogoutAuthLogoutPostData,
  LogoutAuthLogoutPostResponses,
  GetCurrentUserInfoAuthMeGetData,
  GetCurrentUserInfoAuthMeGetResponses,
  SendMessageChatMessagePostData,
  SendMessageChatMessagePostResponses,
  SendMessageChatMessagePostErrors,
  GetChatHistoryChatHistoryGetData,
  GetChatHistoryChatHistoryGetResponses,
  DeleteChatByIdChatHistoryIdDeleteData,
  DeleteChatByIdChatHistoryIdDeleteResponses,
  DeleteChatByIdChatHistoryIdDeleteErrors,
  GetChatByIdChatHistoryIdGetData,
  GetChatByIdChatHistoryIdGetResponses,
  GetChatByIdChatHistoryIdGetErrors,
  ContinueChatChatContinueChatIdPostData,
  ContinueChatChatContinueChatIdPostResponses,
  ContinueChatChatContinueChatIdPostErrors,
  GetChatDataChatDataChatIdGetData,
  GetChatDataChatDataChatIdGetResponses,
  GetChatDataChatDataChatIdGetErrors,
  UploadKbKbUploadPostData,
  UploadKbKbUploadPostResponses,
  UploadKbKbUploadPostErrors,
  ListKbKbListGetData,
  ListKbKbListGetResponses,
  DeleteKbKbFilenameDeleteData,
  DeleteKbKbFilenameDeleteResponses,
  DeleteKbKbFilenameDeleteErrors,
  DownloadKbKbDownloadFilenameGetData,
  DownloadKbKbDownloadFilenameGetResponses,
  DownloadKbKbDownloadFilenameGetErrors,
  DownloadChatDataQueryDownloadChatIdGetData,
  DownloadChatDataQueryDownloadChatIdGetResponses,
  DownloadChatDataQueryDownloadChatIdGetErrors,
  DownloadSampleQueryDownloadGetData,
  DownloadSampleQueryDownloadGetResponses,
  ValidateQueryQueryValidateGetData,
  ValidateQueryQueryValidateGetResponses,
  ValidateQueryQueryValidateGetErrors,
  GetSettingsUserSettingsGetData,
  GetSettingsUserSettingsGetResponses,
  UpdateSettingsUserSettingsPostData,
  UpdateSettingsUserSettingsPostResponses,
  UpdateSettingsUserSettingsPostErrors,
  GetDatasourcesUserDatasourcesGetData,
  GetDatasourcesUserDatasourcesGetResponses,
  GetAccessibleDatasourcesUserDatasourcesAccessibleGetData,
  GetAccessibleDatasourcesUserDatasourcesAccessibleGetResponses,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostResponses,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostErrors,
  GetUserProfileUserProfileGetData,
  GetUserProfileUserProfileGetResponses,
  HealthCheckMetricsHealthGetData,
  HealthCheckMetricsHealthGetResponses,
  RootGetData,
  RootGetResponses,
} from './types.gen';
import {
  zRegisterAuthRegisterPostData,
  zRegisterAuthRegisterPostResponse,
  zLoginAuthLoginPostData,
  zLogoutAuthLogoutPostData,
  zGetCurrentUserInfoAuthMeGetData,
  zGetCurrentUserInfoAuthMeGetResponse,
  zSendMessageChatMessagePostData,
  zGetChatHistoryChatHistoryGetData,
  zDeleteChatByIdChatHistoryIdDeleteData,
  zGetChatByIdChatHistoryIdGetData,
  zContinueChatChatContinueChatIdPostData,
  zGetChatDataChatDataChatIdGetData,
  zUploadKbKbUploadPostData,
  zListKbKbListGetData,
  zListKbKbListGetResponse,
  zDeleteKbKbFilenameDeleteData,
  zDownloadKbKbDownloadFilenameGetData,
  zDownloadChatDataQueryDownloadChatIdGetData,
  zDownloadSampleQueryDownloadGetData,
  zValidateQueryQueryValidateGetData,
  zGetSettingsUserSettingsGetData,
  zGetSettingsUserSettingsGetResponse,
  zUpdateSettingsUserSettingsPostData,
  zGetDatasourcesUserDatasourcesGetData,
  zGetDatasourcesUserDatasourcesGetResponse,
  zGetAccessibleDatasourcesUserDatasourcesAccessibleGetData,
  zGetAccessibleDatasourcesUserDatasourcesAccessibleGetResponse,
  zRequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData,
  zGetUserProfileUserProfileGetData,
  zHealthCheckMetricsHealthGetData,
  zRootGetData,
} from './zod.gen';
import {
  registerAuthRegisterPostResponseTransformer,
  getCurrentUserInfoAuthMeGetResponseTransformer,
} from './transformers.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Register
 * Register new user
 */
export const registerAuthRegisterPost = <ThrowOnError extends boolean = false>(
  options: Options<RegisterAuthRegisterPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterAuthRegisterPostResponses,
    RegisterAuthRegisterPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zRegisterAuthRegisterPostData.parseAsync(data);
    },
    responseTransformer: registerAuthRegisterPostResponseTransformer,
    responseType: 'json',
    responseValidator: async (data) => {
      return await zRegisterAuthRegisterPostResponse.parseAsync(data);
    },
    url: '/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Login
 * Login user
 */
export const loginAuthLoginPost = <ThrowOnError extends boolean = false>(
  options: Options<LoginAuthLoginPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LoginAuthLoginPostResponses,
    LoginAuthLoginPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zLoginAuthLoginPostData.parseAsync(data);
    },
    responseType: 'json',
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Logout
 * Logout user (client-side token removal)
 */
export const logoutAuthLogoutPost = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutAuthLogoutPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LogoutAuthLogoutPostResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zLogoutAuthLogoutPostData.parseAsync(data);
    },
    responseType: 'json',
    url: '/auth/logout',
    ...options,
  });
};

/**
 * Get Current User Info
 * Get current user info
 */
export const getCurrentUserInfoAuthMeGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserInfoAuthMeGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserInfoAuthMeGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetCurrentUserInfoAuthMeGetData.parseAsync(data);
    },
    responseTransformer: getCurrentUserInfoAuthMeGetResponseTransformer,
    responseType: 'json',
    responseValidator: async (data) => {
      return await zGetCurrentUserInfoAuthMeGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/me',
    ...options,
  });
};

/**
 * Send Message
 * Send a message and get response from text2sql pipeline
 */
export const sendMessageChatMessagePost = <ThrowOnError extends boolean = false>(
  options: Options<SendMessageChatMessagePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SendMessageChatMessagePostResponses,
    SendMessageChatMessagePostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zSendMessageChatMessagePostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/message',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Chat History
 * Get chat history for current user
 */
export const getChatHistoryChatHistoryGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetChatHistoryChatHistoryGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetChatHistoryChatHistoryGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetChatHistoryChatHistoryGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/history',
    ...options,
  });
};

/**
 * Delete Chat By Id
 * Delete specific chat by ID for current user
 */
export const deleteChatByIdChatHistoryIdDelete = <ThrowOnError extends boolean = false>(
  options: Options<DeleteChatByIdChatHistoryIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteChatByIdChatHistoryIdDeleteResponses,
    DeleteChatByIdChatHistoryIdDeleteErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDeleteChatByIdChatHistoryIdDeleteData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/history/{id}',
    ...options,
  });
};

/**
 * Get Chat By Id
 * Get specific chat by ID for current user
 */
export const getChatByIdChatHistoryIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetChatByIdChatHistoryIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChatByIdChatHistoryIdGetResponses,
    GetChatByIdChatHistoryIdGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetChatByIdChatHistoryIdGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/history/{id}',
    ...options,
  });
};

/**
 * Continue Chat
 * Continue an existing chat conversation
 */
export const continueChatChatContinueChatIdPost = <ThrowOnError extends boolean = false>(
  options: Options<ContinueChatChatContinueChatIdPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ContinueChatChatContinueChatIdPostResponses,
    ContinueChatChatContinueChatIdPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zContinueChatChatContinueChatIdPostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/continue/{chat_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Chat Data
 * Get the data associated with a chat for download purposes
 */
export const getChatDataChatDataChatIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetChatDataChatDataChatIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChatDataChatDataChatIdGetResponses,
    GetChatDataChatDataChatIdGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetChatDataChatDataChatIdGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/chat/data/{chat_id}',
    ...options,
  });
};

/**
 * Upload Kb
 * Upload knowledge base file
 */
export const uploadKbKbUploadPost = <ThrowOnError extends boolean = false>(
  options: Options<UploadKbKbUploadPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadKbKbUploadPostResponses,
    UploadKbKbUploadPostErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    requestValidator: async (data) => {
      return await zUploadKbKbUploadPostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/upload',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * List Kb
 * List knowledge base files for current user
 */
export const listKbKbListGet = <ThrowOnError extends boolean = false>(
  options?: Options<ListKbKbListGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListKbKbListGetResponses, unknown, ThrowOnError>({
    requestValidator: async (data) => {
      return await zListKbKbListGetData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zListKbKbListGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/list',
    ...options,
  });
};

/**
 * Delete Kb
 * Delete knowledge base file
 */
export const deleteKbKbFilenameDelete = <ThrowOnError extends boolean = false>(
  options: Options<DeleteKbKbFilenameDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteKbKbFilenameDeleteResponses,
    DeleteKbKbFilenameDeleteErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDeleteKbKbFilenameDeleteData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/{filename}',
    ...options,
  });
};

/**
 * Download Kb
 * Download knowledge base file
 */
export const downloadKbKbDownloadFilenameGet = <ThrowOnError extends boolean = false>(
  options: Options<DownloadKbKbDownloadFilenameGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadKbKbDownloadFilenameGetResponses,
    DownloadKbKbDownloadFilenameGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDownloadKbKbDownloadFilenameGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/kb/download/{filename}',
    ...options,
  });
};

/**
 * Download Chat Data
 * Download chat data in specified format
 */
export const downloadChatDataQueryDownloadChatIdGet = <ThrowOnError extends boolean = false>(
  options: Options<DownloadChatDataQueryDownloadChatIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadChatDataQueryDownloadChatIdGetResponses,
    DownloadChatDataQueryDownloadChatIdGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDownloadChatDataQueryDownloadChatIdGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/query/download/{chat_id}',
    ...options,
  });
};

/**
 * Download Sample
 * Download sample data (for testing)
 */
export const downloadSampleQueryDownloadGet = <ThrowOnError extends boolean = false>(
  options?: Options<DownloadSampleQueryDownloadGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DownloadSampleQueryDownloadGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDownloadSampleQueryDownloadGetData.parseAsync(data);
    },
    responseType: 'json',
    url: '/query/download',
    ...options,
  });
};

/**
 * Validate Query
 * Validate SQL query syntax
 */
export const validateQueryQueryValidateGet = <ThrowOnError extends boolean = false>(
  options: Options<ValidateQueryQueryValidateGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ValidateQueryQueryValidateGetResponses,
    ValidateQueryQueryValidateGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zValidateQueryQueryValidateGetData.parseAsync(data);
    },
    responseType: 'json',
    url: '/query/validate',
    ...options,
  });
};

/**
 * Get Settings
 * Get user settings
 */
export const getSettingsUserSettingsGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetSettingsUserSettingsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSettingsUserSettingsGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetSettingsUserSettingsGetData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zGetSettingsUserSettingsGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/settings',
    ...options,
  });
};

/**
 * Update Settings
 * Update user settings
 */
export const updateSettingsUserSettingsPost = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSettingsUserSettingsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UpdateSettingsUserSettingsPostResponses,
    UpdateSettingsUserSettingsPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zUpdateSettingsUserSettingsPostData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/settings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Datasources
 * Get all datasources with user access information
 */
export const getDatasourcesUserDatasourcesGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetDatasourcesUserDatasourcesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDatasourcesUserDatasourcesGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetDatasourcesUserDatasourcesGetData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zGetDatasourcesUserDatasourcesGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/datasources',
    ...options,
  });
};

/**
 * Get Accessible Datasources
 * Get only datasources that user has access to
 */
export const getAccessibleDatasourcesUserDatasourcesAccessibleGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAccessibleDatasourcesUserDatasourcesAccessibleGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAccessibleDatasourcesUserDatasourcesAccessibleGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAccessibleDatasourcesUserDatasourcesAccessibleGetData.parseAsync(data);
    },
    responseType: 'json',
    responseValidator: async (data) => {
      return await zGetAccessibleDatasourcesUserDatasourcesAccessibleGetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/datasources/accessible',
    ...options,
  });
};

/**
 * Request Datasource Access
 * Request access to a datasource
 */
export const requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostResponses,
    RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zRequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData.parseAsync(
        data,
      );
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/datasources/{datasource_id}/request-access',
    ...options,
  });
};

/**
 * Get User Profile
 * Get user profile information
 */
export const getUserProfileUserProfileGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserProfileUserProfileGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserProfileUserProfileGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetUserProfileUserProfileGetData.parseAsync(data);
    },
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user/profile',
    ...options,
  });
};

/**
 * Health Check
 */
export const healthCheckMetricsHealthGet = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckMetricsHealthGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthCheckMetricsHealthGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zHealthCheckMetricsHealthGetData.parseAsync(data);
    },
    responseType: 'json',
    url: '/metrics/health',
    ...options,
  });
};

/**
 * Root Endpoint
 */
export const rootGet = <ThrowOnError extends boolean = false>(
  options?: Options<RootGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
    requestValidator: async (data) => {
      return await zRootGetData.parseAsync(data);
    },
    responseType: 'json',
    url: '/',
    ...options,
  });
};
