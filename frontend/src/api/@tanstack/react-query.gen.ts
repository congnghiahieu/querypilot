// This file is auto-generated by @hey-api/openapi-ts
import { type DefaultError, type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import type { AxiosError } from 'axios';

import { client as _heyApiClient } from '../client.gen';
import {
  type Options,
  confirmSignupAuthConfirmSignupPost,
  continueChatChatContinueChatIdPost,
  deleteChatByIdChatHistoryChatIdDelete,
  deleteKnowledgeBaseKbKbIdDelete,
  downloadFileKbDownloadKbIdGet,
  downloadMessageDataChatDownloadMessageIdGet,
  forgotPasswordAuthForgotPasswordPost,
  getAccessibleDatasourcesUserDatasourcesAccessibleGet,
  getChatByIdChatHistoryChatIdGet,
  getChatHistoryChatHistoryGet,
  getCurrentUserInfoAuthMeGet,
  getDatasourcesUserDatasourcesGet,
  getKbInsightKbKbIdInsightGet,
  getMessageDataChatDataMessageIdGet,
  getSettingsUserSettingsGet,
  getUserIamRoleInfoUserIamRoleInfoGet,
  getUserProfileUserProfileGet,
  healthCheckMetricsHealthGet,
  listKbKbListGet,
  loginAuthLoginPost,
  logoutAuthLogoutPost,
  newChatChatNewPost,
  refreshTokenAuthRefreshPost,
  registerAuthRegisterPost,
  requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost,
  resetPasswordAuthResetPasswordPost,
  rootGet,
  updateSettingsUserSettingsPost,
  uploadFileKbUploadPost,
  uploadTextKbKbUploadTextPost,
} from '../sdk.gen';
import type {
  ConfirmSignupAuthConfirmSignupPostData,
  ConfirmSignupAuthConfirmSignupPostError,
  ContinueChatChatContinueChatIdPostData,
  ContinueChatChatContinueChatIdPostError,
  DeleteChatByIdChatHistoryChatIdDeleteData,
  DeleteChatByIdChatHistoryChatIdDeleteError,
  DeleteKnowledgeBaseKbKbIdDeleteData,
  DeleteKnowledgeBaseKbKbIdDeleteError,
  DownloadFileKbDownloadKbIdGetData,
  DownloadMessageDataChatDownloadMessageIdGetData,
  ForgotPasswordAuthForgotPasswordPostData,
  ForgotPasswordAuthForgotPasswordPostError,
  GetAccessibleDatasourcesUserDatasourcesAccessibleGetData,
  GetChatByIdChatHistoryChatIdGetData,
  GetChatHistoryChatHistoryGetData,
  GetCurrentUserInfoAuthMeGetData,
  GetDatasourcesUserDatasourcesGetData,
  GetKbInsightKbKbIdInsightGetData,
  GetMessageDataChatDataMessageIdGetData,
  GetSettingsUserSettingsGetData,
  GetUserIamRoleInfoUserIamRoleInfoGetData,
  GetUserProfileUserProfileGetData,
  HealthCheckMetricsHealthGetData,
  ListKbKbListGetData,
  LoginAuthLoginPostData,
  LoginAuthLoginPostError,
  LogoutAuthLogoutPostData,
  NewChatChatNewPostData,
  NewChatChatNewPostError,
  RefreshTokenAuthRefreshPostData,
  RefreshTokenAuthRefreshPostError,
  RegisterAuthRegisterPostData,
  RegisterAuthRegisterPostError,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostError,
  ResetPasswordAuthResetPasswordPostData,
  ResetPasswordAuthResetPasswordPostError,
  RootGetData,
  UpdateSettingsUserSettingsPostData,
  UpdateSettingsUserSettingsPostError,
  UploadFileKbUploadPostData,
  UploadFileKbUploadPostError,
  UploadFileKbUploadPostResponse,
  UploadTextKbKbUploadTextPostData,
  UploadTextKbKbUploadTextPostError,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const registerAuthRegisterPostQueryKey = (options: Options<RegisterAuthRegisterPostData>) =>
  createQueryKey('registerAuthRegisterPost', options);

/**
 * Register
 * Register a new user
 */
export const registerAuthRegisterPostOptions = (options: Options<RegisterAuthRegisterPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await registerAuthRegisterPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerAuthRegisterPostQueryKey(options),
  });
};

/**
 * Register
 * Register a new user
 */
export const registerAuthRegisterPostMutation = (
  options?: Partial<Options<RegisterAuthRegisterPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<RegisterAuthRegisterPostError>,
  Options<RegisterAuthRegisterPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<RegisterAuthRegisterPostError>,
    Options<RegisterAuthRegisterPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await registerAuthRegisterPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const confirmSignupAuthConfirmSignupPostQueryKey = (
  options: Options<ConfirmSignupAuthConfirmSignupPostData>,
) => createQueryKey('confirmSignupAuthConfirmSignupPost', options);

/**
 * Confirm Signup
 * Confirm user signup (AWS Cognito only)
 */
export const confirmSignupAuthConfirmSignupPostOptions = (
  options: Options<ConfirmSignupAuthConfirmSignupPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await confirmSignupAuthConfirmSignupPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: confirmSignupAuthConfirmSignupPostQueryKey(options),
  });
};

/**
 * Confirm Signup
 * Confirm user signup (AWS Cognito only)
 */
export const confirmSignupAuthConfirmSignupPostMutation = (
  options?: Partial<Options<ConfirmSignupAuthConfirmSignupPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<ConfirmSignupAuthConfirmSignupPostError>,
  Options<ConfirmSignupAuthConfirmSignupPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<ConfirmSignupAuthConfirmSignupPostError>,
    Options<ConfirmSignupAuthConfirmSignupPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await confirmSignupAuthConfirmSignupPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginAuthLoginPostQueryKey = (options: Options<LoginAuthLoginPostData>) =>
  createQueryKey('loginAuthLoginPost', options);

/**
 * Login
 * Login user
 */
export const loginAuthLoginPostOptions = (options: Options<LoginAuthLoginPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginAuthLoginPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginAuthLoginPostQueryKey(options),
  });
};

/**
 * Login
 * Login user
 */
export const loginAuthLoginPostMutation = (
  options?: Partial<Options<LoginAuthLoginPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<LoginAuthLoginPostError>,
  Options<LoginAuthLoginPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<LoginAuthLoginPostError>,
    Options<LoginAuthLoginPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginAuthLoginPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const logoutAuthLogoutPostQueryKey = (options?: Options<LogoutAuthLogoutPostData>) =>
  createQueryKey('logoutAuthLogoutPost', options);

/**
 * Logout
 * Logout user
 */
export const logoutAuthLogoutPostOptions = (options?: Options<LogoutAuthLogoutPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logoutAuthLogoutPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: logoutAuthLogoutPostQueryKey(options),
  });
};

/**
 * Logout
 * Logout user
 */
export const logoutAuthLogoutPostMutation = (
  options?: Partial<Options<LogoutAuthLogoutPostData>>,
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<LogoutAuthLogoutPostData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<LogoutAuthLogoutPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await logoutAuthLogoutPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const refreshTokenAuthRefreshPostQueryKey = (
  options: Options<RefreshTokenAuthRefreshPostData>,
) => createQueryKey('refreshTokenAuthRefreshPost', options);

/**
 * Refresh Token
 * Refresh access token
 */
export const refreshTokenAuthRefreshPostOptions = (
  options: Options<RefreshTokenAuthRefreshPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await refreshTokenAuthRefreshPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: refreshTokenAuthRefreshPostQueryKey(options),
  });
};

/**
 * Refresh Token
 * Refresh access token
 */
export const refreshTokenAuthRefreshPostMutation = (
  options?: Partial<Options<RefreshTokenAuthRefreshPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<RefreshTokenAuthRefreshPostError>,
  Options<RefreshTokenAuthRefreshPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<RefreshTokenAuthRefreshPostError>,
    Options<RefreshTokenAuthRefreshPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await refreshTokenAuthRefreshPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const forgotPasswordAuthForgotPasswordPostQueryKey = (
  options: Options<ForgotPasswordAuthForgotPasswordPostData>,
) => createQueryKey('forgotPasswordAuthForgotPasswordPost', options);

/**
 * Forgot Password
 * Initiate forgot password flow
 */
export const forgotPasswordAuthForgotPasswordPostOptions = (
  options: Options<ForgotPasswordAuthForgotPasswordPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await forgotPasswordAuthForgotPasswordPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: forgotPasswordAuthForgotPasswordPostQueryKey(options),
  });
};

/**
 * Forgot Password
 * Initiate forgot password flow
 */
export const forgotPasswordAuthForgotPasswordPostMutation = (
  options?: Partial<Options<ForgotPasswordAuthForgotPasswordPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<ForgotPasswordAuthForgotPasswordPostError>,
  Options<ForgotPasswordAuthForgotPasswordPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<ForgotPasswordAuthForgotPasswordPostError>,
    Options<ForgotPasswordAuthForgotPasswordPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await forgotPasswordAuthForgotPasswordPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const resetPasswordAuthResetPasswordPostQueryKey = (
  options: Options<ResetPasswordAuthResetPasswordPostData>,
) => createQueryKey('resetPasswordAuthResetPasswordPost', options);

/**
 * Reset Password
 * Reset password with confirmation code
 */
export const resetPasswordAuthResetPasswordPostOptions = (
  options: Options<ResetPasswordAuthResetPasswordPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await resetPasswordAuthResetPasswordPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: resetPasswordAuthResetPasswordPostQueryKey(options),
  });
};

/**
 * Reset Password
 * Reset password with confirmation code
 */
export const resetPasswordAuthResetPasswordPostMutation = (
  options?: Partial<Options<ResetPasswordAuthResetPasswordPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<ResetPasswordAuthResetPasswordPostError>,
  Options<ResetPasswordAuthResetPasswordPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<ResetPasswordAuthResetPasswordPostError>,
    Options<ResetPasswordAuthResetPasswordPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await resetPasswordAuthResetPasswordPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCurrentUserInfoAuthMeGetQueryKey = (
  options?: Options<GetCurrentUserInfoAuthMeGetData>,
) => createQueryKey('getCurrentUserInfoAuthMeGet', options);

/**
 * Get Current User Info
 * Get current user info
 */
export const getCurrentUserInfoAuthMeGetOptions = (
  options?: Options<GetCurrentUserInfoAuthMeGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCurrentUserInfoAuthMeGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCurrentUserInfoAuthMeGetQueryKey(options),
  });
};

export const newChatChatNewPostQueryKey = (options: Options<NewChatChatNewPostData>) =>
  createQueryKey('newChatChatNewPost', options);

/**
 * New Chat
 * Send a message and get response from text2sql pipeline
 */
export const newChatChatNewPostOptions = (options: Options<NewChatChatNewPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await newChatChatNewPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: newChatChatNewPostQueryKey(options),
  });
};

/**
 * New Chat
 * Send a message and get response from text2sql pipeline
 */
export const newChatChatNewPostMutation = (
  options?: Partial<Options<NewChatChatNewPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<NewChatChatNewPostError>,
  Options<NewChatChatNewPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<NewChatChatNewPostError>,
    Options<NewChatChatNewPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await newChatChatNewPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const continueChatChatContinueChatIdPostQueryKey = (
  options: Options<ContinueChatChatContinueChatIdPostData>,
) => createQueryKey('continueChatChatContinueChatIdPost', options);

/**
 * Continue Chat
 * Continue an existing chat conversation
 */
export const continueChatChatContinueChatIdPostOptions = (
  options: Options<ContinueChatChatContinueChatIdPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await continueChatChatContinueChatIdPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: continueChatChatContinueChatIdPostQueryKey(options),
  });
};

/**
 * Continue Chat
 * Continue an existing chat conversation
 */
export const continueChatChatContinueChatIdPostMutation = (
  options?: Partial<Options<ContinueChatChatContinueChatIdPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<ContinueChatChatContinueChatIdPostError>,
  Options<ContinueChatChatContinueChatIdPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<ContinueChatChatContinueChatIdPostError>,
    Options<ContinueChatChatContinueChatIdPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await continueChatChatContinueChatIdPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getChatHistoryChatHistoryGetQueryKey = (
  options?: Options<GetChatHistoryChatHistoryGetData>,
) => createQueryKey('getChatHistoryChatHistoryGet', options);

/**
 * Get Chat History
 * Get chat history for current user
 */
export const getChatHistoryChatHistoryGetOptions = (
  options?: Options<GetChatHistoryChatHistoryGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChatHistoryChatHistoryGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChatHistoryChatHistoryGetQueryKey(options),
  });
};

/**
 * Delete Chat By Id
 * Delete specific chat by ID for current user
 */
export const deleteChatByIdChatHistoryChatIdDeleteMutation = (
  options?: Partial<Options<DeleteChatByIdChatHistoryChatIdDeleteData>>,
): UseMutationOptions<
  unknown,
  AxiosError<DeleteChatByIdChatHistoryChatIdDeleteError>,
  Options<DeleteChatByIdChatHistoryChatIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DeleteChatByIdChatHistoryChatIdDeleteError>,
    Options<DeleteChatByIdChatHistoryChatIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteChatByIdChatHistoryChatIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getChatByIdChatHistoryChatIdGetQueryKey = (
  options: Options<GetChatByIdChatHistoryChatIdGetData>,
) => createQueryKey('getChatByIdChatHistoryChatIdGet', options);

/**
 * Get Chat By Id
 * Get specific chat by ID for current user
 */
export const getChatByIdChatHistoryChatIdGetOptions = (
  options: Options<GetChatByIdChatHistoryChatIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChatByIdChatHistoryChatIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChatByIdChatHistoryChatIdGetQueryKey(options),
  });
};

export const getMessageDataChatDataMessageIdGetQueryKey = (
  options: Options<GetMessageDataChatDataMessageIdGetData>,
) => createQueryKey('getMessageDataChatDataMessageIdGet', options);

/**
 * Get Message Data
 * Get the data associated with a specific message for preview purposes
 */
export const getMessageDataChatDataMessageIdGetOptions = (
  options: Options<GetMessageDataChatDataMessageIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMessageDataChatDataMessageIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMessageDataChatDataMessageIdGetQueryKey(options),
  });
};

export const downloadMessageDataChatDownloadMessageIdGetQueryKey = (
  options: Options<DownloadMessageDataChatDownloadMessageIdGetData>,
) => createQueryKey('downloadMessageDataChatDownloadMessageIdGet', options);

/**
 * Download Message Data
 * Download message data in specified format
 */
export const downloadMessageDataChatDownloadMessageIdGetOptions = (
  options: Options<DownloadMessageDataChatDownloadMessageIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadMessageDataChatDownloadMessageIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadMessageDataChatDownloadMessageIdGetQueryKey(options),
  });
};

export const uploadFileKbUploadPostQueryKey = (options: Options<UploadFileKbUploadPostData>) =>
  createQueryKey('uploadFileKbUploadPost', options);

/**
 * Upload File
 * Upload file to knowledge base
 */
export const uploadFileKbUploadPostOptions = (options: Options<UploadFileKbUploadPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await uploadFileKbUploadPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: uploadFileKbUploadPostQueryKey(options),
  });
};

/**
 * Upload File
 * Upload file to knowledge base
 */
export const uploadFileKbUploadPostMutation = (
  options?: Partial<Options<UploadFileKbUploadPostData>>,
): UseMutationOptions<
  UploadFileKbUploadPostResponse,
  AxiosError<UploadFileKbUploadPostError>,
  Options<UploadFileKbUploadPostData>
> => {
  const mutationOptions: UseMutationOptions<
    UploadFileKbUploadPostResponse,
    AxiosError<UploadFileKbUploadPostError>,
    Options<UploadFileKbUploadPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await uploadFileKbUploadPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const uploadTextKbKbUploadTextPostQueryKey = (
  options: Options<UploadTextKbKbUploadTextPostData>,
) => createQueryKey('uploadTextKbKbUploadTextPost', options);

/**
 * Upload Text Kb
 * Upload text as knowledge base
 */
export const uploadTextKbKbUploadTextPostOptions = (
  options: Options<UploadTextKbKbUploadTextPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await uploadTextKbKbUploadTextPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: uploadTextKbKbUploadTextPostQueryKey(options),
  });
};

/**
 * Upload Text Kb
 * Upload text as knowledge base
 */
export const uploadTextKbKbUploadTextPostMutation = (
  options?: Partial<Options<UploadTextKbKbUploadTextPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<UploadTextKbKbUploadTextPostError>,
  Options<UploadTextKbKbUploadTextPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<UploadTextKbKbUploadTextPostError>,
    Options<UploadTextKbKbUploadTextPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await uploadTextKbKbUploadTextPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const listKbKbListGetQueryKey = (options?: Options<ListKbKbListGetData>) =>
  createQueryKey('listKbKbListGet', options);

/**
 * List Kb
 * List knowledge base files for current user
 */
export const listKbKbListGetOptions = (options?: Options<ListKbKbListGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listKbKbListGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listKbKbListGetQueryKey(options),
  });
};

export const getKbInsightKbKbIdInsightGetQueryKey = (
  options: Options<GetKbInsightKbKbIdInsightGetData>,
) => createQueryKey('getKbInsightKbKbIdInsightGet', options);

/**
 * Get Kb Insight
 * Get insight for a knowledge base file
 */
export const getKbInsightKbKbIdInsightGetOptions = (
  options: Options<GetKbInsightKbKbIdInsightGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getKbInsightKbKbIdInsightGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getKbInsightKbKbIdInsightGetQueryKey(options),
  });
};

/**
 * Delete Knowledge Base
 * Delete knowledge base entry
 */
export const deleteKnowledgeBaseKbKbIdDeleteMutation = (
  options?: Partial<Options<DeleteKnowledgeBaseKbKbIdDeleteData>>,
): UseMutationOptions<
  unknown,
  AxiosError<DeleteKnowledgeBaseKbKbIdDeleteError>,
  Options<DeleteKnowledgeBaseKbKbIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DeleteKnowledgeBaseKbKbIdDeleteError>,
    Options<DeleteKnowledgeBaseKbKbIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteKnowledgeBaseKbKbIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const downloadFileKbDownloadKbIdGetQueryKey = (
  options: Options<DownloadFileKbDownloadKbIdGetData>,
) => createQueryKey('downloadFileKbDownloadKbIdGet', options);

/**
 * Download File
 * Download file from knowledge base
 */
export const downloadFileKbDownloadKbIdGetOptions = (
  options: Options<DownloadFileKbDownloadKbIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadFileKbDownloadKbIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadFileKbDownloadKbIdGetQueryKey(options),
  });
};

export const getSettingsUserSettingsGetQueryKey = (
  options?: Options<GetSettingsUserSettingsGetData>,
) => createQueryKey('getSettingsUserSettingsGet', options);

/**
 * Get Settings
 * Get user settings
 */
export const getSettingsUserSettingsGetOptions = (
  options?: Options<GetSettingsUserSettingsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSettingsUserSettingsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getSettingsUserSettingsGetQueryKey(options),
  });
};

export const updateSettingsUserSettingsPostQueryKey = (
  options: Options<UpdateSettingsUserSettingsPostData>,
) => createQueryKey('updateSettingsUserSettingsPost', options);

/**
 * Update Settings
 * Update user settings
 */
export const updateSettingsUserSettingsPostOptions = (
  options: Options<UpdateSettingsUserSettingsPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await updateSettingsUserSettingsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: updateSettingsUserSettingsPostQueryKey(options),
  });
};

/**
 * Update Settings
 * Update user settings
 */
export const updateSettingsUserSettingsPostMutation = (
  options?: Partial<Options<UpdateSettingsUserSettingsPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<UpdateSettingsUserSettingsPostError>,
  Options<UpdateSettingsUserSettingsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<UpdateSettingsUserSettingsPostError>,
    Options<UpdateSettingsUserSettingsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateSettingsUserSettingsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getDatasourcesUserDatasourcesGetQueryKey = (
  options?: Options<GetDatasourcesUserDatasourcesGetData>,
) => createQueryKey('getDatasourcesUserDatasourcesGet', options);

/**
 * Get Datasources
 * Get all datasources with user access information
 */
export const getDatasourcesUserDatasourcesGetOptions = (
  options?: Options<GetDatasourcesUserDatasourcesGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDatasourcesUserDatasourcesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDatasourcesUserDatasourcesGetQueryKey(options),
  });
};

export const getAccessibleDatasourcesUserDatasourcesAccessibleGetQueryKey = (
  options?: Options<GetAccessibleDatasourcesUserDatasourcesAccessibleGetData>,
) => createQueryKey('getAccessibleDatasourcesUserDatasourcesAccessibleGet', options);

/**
 * Get Accessible Datasources
 * Get only datasources that user has access to
 */
export const getAccessibleDatasourcesUserDatasourcesAccessibleGetOptions = (
  options?: Options<GetAccessibleDatasourcesUserDatasourcesAccessibleGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccessibleDatasourcesUserDatasourcesAccessibleGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAccessibleDatasourcesUserDatasourcesAccessibleGetQueryKey(options),
  });
};

export const requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostQueryKey = (
  options: Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>,
) => createQueryKey('requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost', options);

/**
 * Request Datasource Access
 * Request access to a datasource
 */
export const requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostOptions = (
  options: Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostQueryKey(options),
  });
};

/**
 * Request Datasource Access
 * Request access to a datasource
 */
export const requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostMutation = (
  options?: Partial<
    Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>
  >,
): UseMutationOptions<
  unknown,
  AxiosError<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostError>,
  Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostError>,
    Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUserProfileUserProfileGetQueryKey = (
  options?: Options<GetUserProfileUserProfileGetData>,
) => createQueryKey('getUserProfileUserProfileGet', options);

/**
 * Get User Profile
 * Get user profile information
 */
export const getUserProfileUserProfileGetOptions = (
  options?: Options<GetUserProfileUserProfileGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserProfileUserProfileGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserProfileUserProfileGetQueryKey(options),
  });
};

export const getUserIamRoleInfoUserIamRoleInfoGetQueryKey = (
  options?: Options<GetUserIamRoleInfoUserIamRoleInfoGetData>,
) => createQueryKey('getUserIamRoleInfoUserIamRoleInfoGet', options);

/**
 * Get User Iam Role Info
 * Get user IAM role information (AWS only)
 */
export const getUserIamRoleInfoUserIamRoleInfoGetOptions = (
  options?: Options<GetUserIamRoleInfoUserIamRoleInfoGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserIamRoleInfoUserIamRoleInfoGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserIamRoleInfoUserIamRoleInfoGetQueryKey(options),
  });
};

export const healthCheckMetricsHealthGetQueryKey = (
  options?: Options<HealthCheckMetricsHealthGetData>,
) => createQueryKey('healthCheckMetricsHealthGet', options);

/**
 * Health Check
 */
export const healthCheckMetricsHealthGetOptions = (
  options?: Options<HealthCheckMetricsHealthGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthCheckMetricsHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckMetricsHealthGetQueryKey(options),
  });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) =>
  createQueryKey('rootGet', options);

/**
 * Root Endpoint
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rootGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootGetQueryKey(options),
  });
};
