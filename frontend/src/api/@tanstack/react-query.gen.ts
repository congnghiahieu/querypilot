// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  registerAuthRegisterPost,
  loginAuthLoginPost,
  logoutAuthLogoutPost,
  getCurrentUserInfoAuthMeGet,
  sendMessageChatMessagePost,
  getChatHistoryChatHistoryGet,
  deleteChatByIdChatHistoryIdDelete,
  getChatByIdChatHistoryIdGet,
  continueChatChatContinueChatIdPost,
  getChatDataChatDataChatIdGet,
  uploadKbKbUploadPost,
  listKbKbListGet,
  deleteKbKbFilenameDelete,
  downloadKbKbDownloadFilenameGet,
  downloadChatDataQueryDownloadChatIdGet,
  downloadSampleQueryDownloadGet,
  validateQueryQueryValidateGet,
  getSettingsUserSettingsGet,
  updateSettingsUserSettingsPost,
  getDatasourcesUserDatasourcesGet,
  getAccessibleDatasourcesUserDatasourcesAccessibleGet,
  requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost,
  getUserProfileUserProfileGet,
  healthCheckMetricsHealthGet,
  rootGet,
} from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type {
  RegisterAuthRegisterPostData,
  RegisterAuthRegisterPostError,
  RegisterAuthRegisterPostResponse,
  LoginAuthLoginPostData,
  LoginAuthLoginPostError,
  LogoutAuthLogoutPostData,
  GetCurrentUserInfoAuthMeGetData,
  SendMessageChatMessagePostData,
  SendMessageChatMessagePostError,
  GetChatHistoryChatHistoryGetData,
  DeleteChatByIdChatHistoryIdDeleteData,
  DeleteChatByIdChatHistoryIdDeleteError,
  GetChatByIdChatHistoryIdGetData,
  ContinueChatChatContinueChatIdPostData,
  ContinueChatChatContinueChatIdPostError,
  GetChatDataChatDataChatIdGetData,
  UploadKbKbUploadPostData,
  UploadKbKbUploadPostError,
  ListKbKbListGetData,
  DeleteKbKbFilenameDeleteData,
  DeleteKbKbFilenameDeleteError,
  DownloadKbKbDownloadFilenameGetData,
  DownloadChatDataQueryDownloadChatIdGetData,
  DownloadSampleQueryDownloadGetData,
  ValidateQueryQueryValidateGetData,
  GetSettingsUserSettingsGetData,
  UpdateSettingsUserSettingsPostData,
  UpdateSettingsUserSettingsPostError,
  GetDatasourcesUserDatasourcesGetData,
  GetAccessibleDatasourcesUserDatasourcesAccessibleGetData,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData,
  RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostError,
  GetUserProfileUserProfileGetData,
  HealthCheckMetricsHealthGetData,
  RootGetData,
} from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const registerAuthRegisterPostQueryKey = (options: Options<RegisterAuthRegisterPostData>) =>
  createQueryKey('registerAuthRegisterPost', options);

/**
 * Register
 * Register new user
 */
export const registerAuthRegisterPostOptions = (options: Options<RegisterAuthRegisterPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await registerAuthRegisterPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerAuthRegisterPostQueryKey(options),
  });
};

/**
 * Register
 * Register new user
 */
export const registerAuthRegisterPostMutation = (
  options?: Partial<Options<RegisterAuthRegisterPostData>>,
): UseMutationOptions<
  RegisterAuthRegisterPostResponse,
  AxiosError<RegisterAuthRegisterPostError>,
  Options<RegisterAuthRegisterPostData>
> => {
  const mutationOptions: UseMutationOptions<
    RegisterAuthRegisterPostResponse,
    AxiosError<RegisterAuthRegisterPostError>,
    Options<RegisterAuthRegisterPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await registerAuthRegisterPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginAuthLoginPostQueryKey = (options: Options<LoginAuthLoginPostData>) =>
  createQueryKey('loginAuthLoginPost', options);

/**
 * Login
 * Login user
 */
export const loginAuthLoginPostOptions = (options: Options<LoginAuthLoginPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginAuthLoginPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginAuthLoginPostQueryKey(options),
  });
};

/**
 * Login
 * Login user
 */
export const loginAuthLoginPostMutation = (
  options?: Partial<Options<LoginAuthLoginPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<LoginAuthLoginPostError>,
  Options<LoginAuthLoginPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<LoginAuthLoginPostError>,
    Options<LoginAuthLoginPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginAuthLoginPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const logoutAuthLogoutPostQueryKey = (options?: Options<LogoutAuthLogoutPostData>) =>
  createQueryKey('logoutAuthLogoutPost', options);

/**
 * Logout
 * Logout user (client-side token removal)
 */
export const logoutAuthLogoutPostOptions = (options?: Options<LogoutAuthLogoutPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logoutAuthLogoutPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: logoutAuthLogoutPostQueryKey(options),
  });
};

/**
 * Logout
 * Logout user (client-side token removal)
 */
export const logoutAuthLogoutPostMutation = (
  options?: Partial<Options<LogoutAuthLogoutPostData>>,
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<LogoutAuthLogoutPostData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<LogoutAuthLogoutPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await logoutAuthLogoutPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCurrentUserInfoAuthMeGetQueryKey = (
  options?: Options<GetCurrentUserInfoAuthMeGetData>,
) => createQueryKey('getCurrentUserInfoAuthMeGet', options);

/**
 * Get Current User Info
 * Get current user info
 */
export const getCurrentUserInfoAuthMeGetOptions = (
  options?: Options<GetCurrentUserInfoAuthMeGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCurrentUserInfoAuthMeGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCurrentUserInfoAuthMeGetQueryKey(options),
  });
};

export const sendMessageChatMessagePostQueryKey = (
  options: Options<SendMessageChatMessagePostData>,
) => createQueryKey('sendMessageChatMessagePost', options);

/**
 * Send Message
 * Send a message and get response from text2sql pipeline
 */
export const sendMessageChatMessagePostOptions = (
  options: Options<SendMessageChatMessagePostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sendMessageChatMessagePost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: sendMessageChatMessagePostQueryKey(options),
  });
};

/**
 * Send Message
 * Send a message and get response from text2sql pipeline
 */
export const sendMessageChatMessagePostMutation = (
  options?: Partial<Options<SendMessageChatMessagePostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<SendMessageChatMessagePostError>,
  Options<SendMessageChatMessagePostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<SendMessageChatMessagePostError>,
    Options<SendMessageChatMessagePostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await sendMessageChatMessagePost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getChatHistoryChatHistoryGetQueryKey = (
  options?: Options<GetChatHistoryChatHistoryGetData>,
) => createQueryKey('getChatHistoryChatHistoryGet', options);

/**
 * Get Chat History
 * Get chat history for current user
 */
export const getChatHistoryChatHistoryGetOptions = (
  options?: Options<GetChatHistoryChatHistoryGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChatHistoryChatHistoryGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChatHistoryChatHistoryGetQueryKey(options),
  });
};

/**
 * Delete Chat By Id
 * Delete specific chat by ID for current user
 */
export const deleteChatByIdChatHistoryIdDeleteMutation = (
  options?: Partial<Options<DeleteChatByIdChatHistoryIdDeleteData>>,
): UseMutationOptions<
  unknown,
  AxiosError<DeleteChatByIdChatHistoryIdDeleteError>,
  Options<DeleteChatByIdChatHistoryIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DeleteChatByIdChatHistoryIdDeleteError>,
    Options<DeleteChatByIdChatHistoryIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteChatByIdChatHistoryIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getChatByIdChatHistoryIdGetQueryKey = (
  options: Options<GetChatByIdChatHistoryIdGetData>,
) => createQueryKey('getChatByIdChatHistoryIdGet', options);

/**
 * Get Chat By Id
 * Get specific chat by ID for current user
 */
export const getChatByIdChatHistoryIdGetOptions = (
  options: Options<GetChatByIdChatHistoryIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChatByIdChatHistoryIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChatByIdChatHistoryIdGetQueryKey(options),
  });
};

export const continueChatChatContinueChatIdPostQueryKey = (
  options: Options<ContinueChatChatContinueChatIdPostData>,
) => createQueryKey('continueChatChatContinueChatIdPost', options);

/**
 * Continue Chat
 * Continue an existing chat conversation
 */
export const continueChatChatContinueChatIdPostOptions = (
  options: Options<ContinueChatChatContinueChatIdPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await continueChatChatContinueChatIdPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: continueChatChatContinueChatIdPostQueryKey(options),
  });
};

/**
 * Continue Chat
 * Continue an existing chat conversation
 */
export const continueChatChatContinueChatIdPostMutation = (
  options?: Partial<Options<ContinueChatChatContinueChatIdPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<ContinueChatChatContinueChatIdPostError>,
  Options<ContinueChatChatContinueChatIdPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<ContinueChatChatContinueChatIdPostError>,
    Options<ContinueChatChatContinueChatIdPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await continueChatChatContinueChatIdPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getChatDataChatDataChatIdGetQueryKey = (
  options: Options<GetChatDataChatDataChatIdGetData>,
) => createQueryKey('getChatDataChatDataChatIdGet', options);

/**
 * Get Chat Data
 * Get the data associated with a chat for download purposes
 */
export const getChatDataChatDataChatIdGetOptions = (
  options: Options<GetChatDataChatDataChatIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChatDataChatDataChatIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChatDataChatDataChatIdGetQueryKey(options),
  });
};

export const uploadKbKbUploadPostQueryKey = (options: Options<UploadKbKbUploadPostData>) =>
  createQueryKey('uploadKbKbUploadPost', options);

/**
 * Upload Kb
 * Upload knowledge base file
 */
export const uploadKbKbUploadPostOptions = (options: Options<UploadKbKbUploadPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await uploadKbKbUploadPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: uploadKbKbUploadPostQueryKey(options),
  });
};

/**
 * Upload Kb
 * Upload knowledge base file
 */
export const uploadKbKbUploadPostMutation = (
  options?: Partial<Options<UploadKbKbUploadPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<UploadKbKbUploadPostError>,
  Options<UploadKbKbUploadPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<UploadKbKbUploadPostError>,
    Options<UploadKbKbUploadPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await uploadKbKbUploadPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const listKbKbListGetQueryKey = (options?: Options<ListKbKbListGetData>) =>
  createQueryKey('listKbKbListGet', options);

/**
 * List Kb
 * List knowledge base files for current user
 */
export const listKbKbListGetOptions = (options?: Options<ListKbKbListGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listKbKbListGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listKbKbListGetQueryKey(options),
  });
};

/**
 * Delete Kb
 * Delete knowledge base file
 */
export const deleteKbKbFilenameDeleteMutation = (
  options?: Partial<Options<DeleteKbKbFilenameDeleteData>>,
): UseMutationOptions<
  unknown,
  AxiosError<DeleteKbKbFilenameDeleteError>,
  Options<DeleteKbKbFilenameDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DeleteKbKbFilenameDeleteError>,
    Options<DeleteKbKbFilenameDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteKbKbFilenameDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const downloadKbKbDownloadFilenameGetQueryKey = (
  options: Options<DownloadKbKbDownloadFilenameGetData>,
) => createQueryKey('downloadKbKbDownloadFilenameGet', options);

/**
 * Download Kb
 * Download knowledge base file
 */
export const downloadKbKbDownloadFilenameGetOptions = (
  options: Options<DownloadKbKbDownloadFilenameGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadKbKbDownloadFilenameGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadKbKbDownloadFilenameGetQueryKey(options),
  });
};

export const downloadChatDataQueryDownloadChatIdGetQueryKey = (
  options: Options<DownloadChatDataQueryDownloadChatIdGetData>,
) => createQueryKey('downloadChatDataQueryDownloadChatIdGet', options);

/**
 * Download Chat Data
 * Download chat data in specified format
 */
export const downloadChatDataQueryDownloadChatIdGetOptions = (
  options: Options<DownloadChatDataQueryDownloadChatIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadChatDataQueryDownloadChatIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadChatDataQueryDownloadChatIdGetQueryKey(options),
  });
};

export const downloadSampleQueryDownloadGetQueryKey = (
  options?: Options<DownloadSampleQueryDownloadGetData>,
) => createQueryKey('downloadSampleQueryDownloadGet', options);

/**
 * Download Sample
 * Download sample data (for testing)
 */
export const downloadSampleQueryDownloadGetOptions = (
  options?: Options<DownloadSampleQueryDownloadGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadSampleQueryDownloadGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadSampleQueryDownloadGetQueryKey(options),
  });
};

export const validateQueryQueryValidateGetQueryKey = (
  options: Options<ValidateQueryQueryValidateGetData>,
) => createQueryKey('validateQueryQueryValidateGet', options);

/**
 * Validate Query
 * Validate SQL query syntax
 */
export const validateQueryQueryValidateGetOptions = (
  options: Options<ValidateQueryQueryValidateGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await validateQueryQueryValidateGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: validateQueryQueryValidateGetQueryKey(options),
  });
};

export const getSettingsUserSettingsGetQueryKey = (
  options?: Options<GetSettingsUserSettingsGetData>,
) => createQueryKey('getSettingsUserSettingsGet', options);

/**
 * Get Settings
 * Get user settings
 */
export const getSettingsUserSettingsGetOptions = (
  options?: Options<GetSettingsUserSettingsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSettingsUserSettingsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getSettingsUserSettingsGetQueryKey(options),
  });
};

export const updateSettingsUserSettingsPostQueryKey = (
  options: Options<UpdateSettingsUserSettingsPostData>,
) => createQueryKey('updateSettingsUserSettingsPost', options);

/**
 * Update Settings
 * Update user settings
 */
export const updateSettingsUserSettingsPostOptions = (
  options: Options<UpdateSettingsUserSettingsPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await updateSettingsUserSettingsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: updateSettingsUserSettingsPostQueryKey(options),
  });
};

/**
 * Update Settings
 * Update user settings
 */
export const updateSettingsUserSettingsPostMutation = (
  options?: Partial<Options<UpdateSettingsUserSettingsPostData>>,
): UseMutationOptions<
  unknown,
  AxiosError<UpdateSettingsUserSettingsPostError>,
  Options<UpdateSettingsUserSettingsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<UpdateSettingsUserSettingsPostError>,
    Options<UpdateSettingsUserSettingsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateSettingsUserSettingsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getDatasourcesUserDatasourcesGetQueryKey = (
  options?: Options<GetDatasourcesUserDatasourcesGetData>,
) => createQueryKey('getDatasourcesUserDatasourcesGet', options);

/**
 * Get Datasources
 * Get all datasources with user access information
 */
export const getDatasourcesUserDatasourcesGetOptions = (
  options?: Options<GetDatasourcesUserDatasourcesGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDatasourcesUserDatasourcesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDatasourcesUserDatasourcesGetQueryKey(options),
  });
};

export const getAccessibleDatasourcesUserDatasourcesAccessibleGetQueryKey = (
  options?: Options<GetAccessibleDatasourcesUserDatasourcesAccessibleGetData>,
) => createQueryKey('getAccessibleDatasourcesUserDatasourcesAccessibleGet', options);

/**
 * Get Accessible Datasources
 * Get only datasources that user has access to
 */
export const getAccessibleDatasourcesUserDatasourcesAccessibleGetOptions = (
  options?: Options<GetAccessibleDatasourcesUserDatasourcesAccessibleGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccessibleDatasourcesUserDatasourcesAccessibleGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAccessibleDatasourcesUserDatasourcesAccessibleGetQueryKey(options),
  });
};

export const requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostQueryKey = (
  options: Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>,
) => createQueryKey('requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost', options);

/**
 * Request Datasource Access
 * Request access to a datasource
 */
export const requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostOptions = (
  options: Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostQueryKey(options),
  });
};

/**
 * Request Datasource Access
 * Request access to a datasource
 */
export const requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostMutation = (
  options?: Partial<
    Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>
  >,
): UseMutationOptions<
  unknown,
  AxiosError<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostError>,
  Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostError>,
    Options<RequestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await requestDatasourceAccessUserDatasourcesDatasourceIdRequestAccessPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUserProfileUserProfileGetQueryKey = (
  options?: Options<GetUserProfileUserProfileGetData>,
) => createQueryKey('getUserProfileUserProfileGet', options);

/**
 * Get User Profile
 * Get user profile information
 */
export const getUserProfileUserProfileGetOptions = (
  options?: Options<GetUserProfileUserProfileGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserProfileUserProfileGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserProfileUserProfileGetQueryKey(options),
  });
};

export const healthCheckMetricsHealthGetQueryKey = (
  options?: Options<HealthCheckMetricsHealthGetData>,
) => createQueryKey('healthCheckMetricsHealthGet', options);

/**
 * Health Check
 */
export const healthCheckMetricsHealthGetOptions = (
  options?: Options<HealthCheckMetricsHealthGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthCheckMetricsHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckMetricsHealthGetQueryKey(options),
  });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) =>
  createQueryKey('rootGet', options);

/**
 * Root Endpoint
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rootGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootGetQueryKey(options),
  });
};
